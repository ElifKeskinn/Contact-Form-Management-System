{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ElifCSE\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\projeler\\\\pokedex\\\\contact-form-management-server\\\\contact-form-management-frontend\\\\src\\\\components\\\\reports\\\\BarChart.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BarChart({\n  id,\n  data\n}) {\n  _s();\n  const sortedData = Object.fromEntries(Object.entries(data).sort(([, valueA], [, valueB]) => valueB - valueA));\n  const chartRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  useEffect(() => {\n    const myChartRef = chartRef.current.getContext(\"2d\");\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.data.labels = Object.keys(sortedData);\n      chartInstanceRef.current.data.datasets[0].data = Object.values(sortedData);\n      chartInstanceRef.current.update();\n    } else {\n      chartInstanceRef.current = new Chart(myChartRef, {\n        type: \"bar\",\n        data: {\n          labels: Object.keys(sortedData),\n          datasets: [{\n            label: \"Message counts\",\n            data: Object.values(sortedData),\n            backgroundColor: \"#b728ee\",\n            borderColor: \"#850fb2\",\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: true,\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                color: \"white\",\n                // Set the color of the axis ticks to white\n                precision: 0,\n                // Display only whole integers\n                callback: function (value) {\n                  if (value % 1 === 0) {\n                    // Avoid displaying \".0\" for whole numbers\n                    return value.toString();\n                  }\n                }\n              },\n              grid: {\n                color: \"rgba(255, 255, 255, 0.2)\" // Set the color of the grid lines to white\n              }\n            },\n            x: {\n              ticks: {\n                color: \"white\" // Set the color of the axis ticks to white\n              },\n              grid: {\n                display: false // Hide the x-axis grid lines\n              }\n            }\n          },\n          plugins: {\n            title: {\n              display: false,\n              font: {\n                size: 30,\n                weight: \"lighter\"\n              },\n              text: \"Message counts by countries\",\n              color: \"orange\"\n            },\n            legend: {\n              labels: {\n                color: \"white\"\n              }\n            }\n          }\n        }\n      });\n    }\n    return () => {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n        chartInstanceRef.current = null;\n      }\n    };\n  }, [id, sortedData]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: chartRef,\n    id: `barChart-${id}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 10\n  }, this);\n}\n_s(BarChart, \"0kidk2EAizBYKgfY+KQx4ULbe78=\");\n_c = BarChart;\nBarChart.propTypes = {\n  id: PropTypes.string.isRequired,\n  data: PropTypes.objectOf(PropTypes.number).isRequired\n};\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["useEffect","useRef","PropTypes","Chart","jsxDEV","_jsxDEV","BarChart","id","data","_s","sortedData","Object","fromEntries","entries","sort","valueA","valueB","chartRef","chartInstanceRef","myChartRef","current","getContext","labels","keys","datasets","values","update","type","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","scales","y","beginAtZero","ticks","color","precision","callback","value","toString","grid","x","display","plugins","title","font","size","weight","text","legend","destroy","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","string","isRequired","objectOf","number","$RefreshReg$"],"sources":["C:/Users/ElifCSE/OneDrive/Masaüstü/projeler/pokedex/contact-form-management-server/contact-form-management-frontend/src/components/reports/BarChart.jsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Chart from \"chart.js/auto\";\r\n\r\nfunction BarChart({ id, data }) {\r\n  const sortedData = Object.fromEntries(\r\n    Object.entries(data).sort(([, valueA], [, valueB]) => valueB - valueA)\r\n  );\r\n\r\n  const chartRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const myChartRef = chartRef.current.getContext(\"2d\");\r\n\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.data.labels = Object.keys(sortedData);\r\n      chartInstanceRef.current.data.datasets[0].data = Object.values(sortedData);\r\n      chartInstanceRef.current.update();\r\n    } else {\r\n      chartInstanceRef.current = new Chart(myChartRef, {\r\n        type: \"bar\",\r\n        data: {\r\n          labels: Object.keys(sortedData),\r\n          datasets: [\r\n            {\r\n              label: \"Message counts\",\r\n              data: Object.values(sortedData),\r\n              backgroundColor: \"#b728ee\",\r\n              borderColor: \"#850fb2\",\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: true,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              ticks: {\r\n                color: \"white\", // Set the color of the axis ticks to white\r\n                precision: 0, // Display only whole integers\r\n                callback: function (value) {\r\n                  if (value % 1 === 0) {\r\n                    // Avoid displaying \".0\" for whole numbers\r\n                    return value.toString();\r\n                  }\r\n                },\r\n              },\r\n              grid: {\r\n                color: \"rgba(255, 255, 255, 0.2)\", // Set the color of the grid lines to white\r\n              },\r\n            },\r\n            x: {\r\n              ticks: {\r\n                color: \"white\", // Set the color of the axis ticks to white\r\n              },\r\n              grid: {\r\n                display: false, // Hide the x-axis grid lines\r\n              },\r\n            },\r\n          },\r\n          plugins: {\r\n            title: {\r\n              display: false,\r\n              font: {\r\n                size: 30,\r\n                weight: \"lighter\",\r\n              },\r\n              text: \"Message counts by countries\",\r\n              color: \"orange\",\r\n            },\r\n            legend: {\r\n              labels: {\r\n                color: \"white\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (chartInstanceRef.current) {\r\n        chartInstanceRef.current.destroy();\r\n        chartInstanceRef.current = null;\r\n      }\r\n    };\r\n  }, [id, sortedData]);\r\n\r\n  return <canvas ref={chartRef} id={`barChart-${id}`} />;\r\n}\r\n\r\nBarChart.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  data: PropTypes.objectOf(PropTypes.number).isRequired,\r\n};\r\n\r\nexport default BarChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}