{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ElifCSE\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\projeler\\\\pokedex\\\\contact-form-management-server\\\\contact-form-management-frontend\\\\src\\\\components\\\\reports\\\\BarChart.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Chart from \"chart.js/auto\";\nimport { useDarkMode } from \"../../context/DarkModeContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BarChart({\n  chartId,\n  chartData\n}) {\n  _s();\n  // Verilerin geçerli olup olmadığını kontrol et\n  const validatedData = chartData && typeof chartData === 'object' ? chartData : {};\n\n  // Verileri sıralayıp düzenle\n  const sortedEntries = Object.entries(validatedData).sort(([, a], [, b]) => b - a);\n  const sortedChartData = Object.fromEntries(sortedEntries);\n  const canvasRef = useRef(null);\n  const chartInstanceRef = useRef(null);\n  const {\n    darkMode\n  } = useDarkMode();\n  useEffect(() => {\n    const ctx = canvasRef.current.getContext(\"2d\");\n    if (chartInstanceRef.current) {\n      chartInstanceRef.current.data.labels = Object.keys(sortedChartData);\n      chartInstanceRef.current.data.datasets[0].data = Object.values(sortedChartData);\n      chartInstanceRef.current.update();\n    } else {\n      chartInstanceRef.current = new Chart(ctx, {\n        type: \"bar\",\n        data: {\n          labels: Object.keys(sortedChartData),\n          datasets: [{\n            label: \"Message Count\",\n            data: Object.values(sortedChartData),\n            backgroundColor: \"#b728ee\",\n            borderColor: \"#850fb2\",\n            borderWidth: 1\n          }]\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: true,\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                color: \"white\",\n                precision: 0,\n                callback: value => value % 1 === 0 ? value.toString() : \"\"\n              },\n              grid: {\n                color: \"rgba(255, 255, 255, 0.2)\"\n              }\n            },\n            x: {\n              ticks: {\n                color: \"white\"\n              },\n              grid: {\n                display: false\n              }\n            }\n          },\n          plugins: {\n            title: {\n              display: false,\n              font: {\n                size: 30,\n                weight: \"lighter\"\n              },\n              text: \"Message Counts by Country\",\n              color: \"orange\"\n            },\n            legend: {\n              labels: {\n                color: \"white\"\n              }\n            }\n          }\n        }\n      });\n    }\n    return () => {\n      if (chartInstanceRef.current) {\n        chartInstanceRef.current.destroy();\n        chartInstanceRef.current = null;\n      }\n    };\n  }, [chartId, sortedChartData]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    id: `chart-${chartId}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 10\n  }, this);\n}\n_s(BarChart, \"hFHQg1TYZ/UVxJWdWIEyxTaMdsQ=\", false, function () {\n  return [useDarkMode];\n});\n_c = BarChart;\nBarChart.propTypes = {\n  chartId: PropTypes.string.isRequired,\n  chartData: PropTypes.objectOf(PropTypes.number).isRequired\n};\nexport default BarChart;\nvar _c;\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"names":["useEffect","useRef","PropTypes","Chart","useDarkMode","jsxDEV","_jsxDEV","BarChart","chartId","chartData","_s","validatedData","sortedEntries","Object","entries","sort","a","b","sortedChartData","fromEntries","canvasRef","chartInstanceRef","darkMode","ctx","current","getContext","data","labels","keys","datasets","values","update","type","label","backgroundColor","borderColor","borderWidth","options","responsive","maintainAspectRatio","scales","y","beginAtZero","ticks","color","precision","callback","value","toString","grid","x","display","plugins","title","font","size","weight","text","legend","destroy","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","string","isRequired","objectOf","number","$RefreshReg$"],"sources":["C:/Users/ElifCSE/OneDrive/Masaüstü/projeler/pokedex/contact-form-management-server/contact-form-management-frontend/src/components/reports/BarChart.jsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Chart from \"chart.js/auto\";\r\nimport { useDarkMode } from \"../../context/DarkModeContext\";\r\n\r\nfunction BarChart({ chartId, chartData }) {\r\n  // Verilerin geçerli olup olmadığını kontrol et\r\n  const validatedData = chartData && typeof chartData === 'object' ? chartData : {};\r\n  \r\n  // Verileri sıralayıp düzenle\r\n  const sortedEntries = Object.entries(validatedData).sort(([, a], [, b]) => b - a);\r\n  const sortedChartData = Object.fromEntries(sortedEntries);\r\n\r\n  const canvasRef = useRef(null);\r\n  const chartInstanceRef = useRef(null);\r\n\r\n  const { darkMode } = useDarkMode();\r\n\r\n  useEffect(() => {\r\n    const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n    if (chartInstanceRef.current) {\r\n      chartInstanceRef.current.data.labels = Object.keys(sortedChartData);\r\n      chartInstanceRef.current.data.datasets[0].data = Object.values(sortedChartData);\r\n      chartInstanceRef.current.update();\r\n    } else {\r\n      chartInstanceRef.current = new Chart(ctx, {\r\n        type: \"bar\",\r\n        data: {\r\n          labels: Object.keys(sortedChartData),\r\n          datasets: [\r\n            {\r\n              label: \"Message Count\",\r\n              data: Object.values(sortedChartData),\r\n              backgroundColor: \"#b728ee\",\r\n              borderColor: \"#850fb2\",\r\n              borderWidth: 1,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: true,\r\n          scales: {\r\n            y: {\r\n              beginAtZero: true,\r\n              ticks: {\r\n                color: \"white\",\r\n                precision: 0,\r\n                callback: (value) => (value % 1 === 0 ? value.toString() : \"\"),\r\n              },\r\n              grid: {\r\n                color: \"rgba(255, 255, 255, 0.2)\",\r\n              },\r\n            },\r\n            x: {\r\n              ticks: {\r\n                color: \"white\",\r\n              },\r\n              grid: {\r\n                display: false,\r\n              },\r\n            },\r\n          },\r\n          plugins: {\r\n            title: {\r\n              display: false,\r\n              font: {\r\n                size: 30,\r\n                weight: \"lighter\",\r\n              },\r\n              text: \"Message Counts by Country\",\r\n              color: \"orange\",\r\n            },\r\n            legend: {\r\n              labels: {\r\n                color: \"white\",\r\n              },\r\n            },\r\n          },\r\n        },\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (chartInstanceRef.current) {\r\n        chartInstanceRef.current.destroy();\r\n        chartInstanceRef.current = null;\r\n      }\r\n    };\r\n  }, [chartId, sortedChartData]);\r\n\r\n  return <canvas ref={canvasRef} id={`chart-${chartId}`} />;\r\n}\r\n\r\n\r\nBarChart.propTypes = {\r\n  chartId: PropTypes.string.isRequired,\r\n  chartData: PropTypes.objectOf(PropTypes.number).isRequired,\r\n};\r\n\r\n\r\n\r\nexport default BarChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}